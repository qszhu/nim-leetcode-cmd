# --profiler:on --stackTrace:on
# --profiler:off --stackTrace:on -d:memProfiler
when compileOption("profiler") or defined(memProfiler):
  import nimprof

import ../../../../../lib/nimwasm/types

${argDefs}
${returnVarDef}

proc init()
proc solve()
proc main(lines: cstring, sz: int): cstring {.exportc: "solve".} =
  init()
  let
    reader = newReader(lines, sz)
    writer = newWriter()

  while reader.hasNext:
${readArgs}
    solve()
    writer.write res

  writer.toCString

when isMainModule:
  block:
    let s = stdin.readAll
    echo $(main(s.cstring, s.len))

proc init() =
  discard

proc solve() =
${returnVarInit}
  # TODO
